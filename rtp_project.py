# -*- coding: utf-8 -*-
"""rtp project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10MX_VwF9-7LQ9rc265yunhMGEzL8h2XW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pip install scikit-learn

df = pd.read_csv("Mall_Customers.csv", encoding='ISO-8859-1')
df.head()

df.shape

df.describe()

df.dtypes

df.isnull().sum()

df.drop(["CustomerID"],axis=1,inplace=True)

df.head()

plt.figure(1,figsize=(15,6))
n=0
for x in ['Age','Annual Income (k$)','Spending Score (1-100)']:
  n=n+1
  plt.subplot(1,3,n)
  plt.subplots_adjust(hspace=0.5,wspace=0.5)
  sns.distplot(df[x],bins=20)
  plt.title('Graph of{}'.format(x))
plt.show()

plt.figure(figsize=(15,5))
sns.countplot(y='Gender',data=df)
plt.show()

plt.figure(1,figsize=(15,6))
n=0
for cols in ['Age','Annual Income (k$)','Spending Score (1-100)']:
  n=n+1
  plt.subplot(1,3,n)
  sns.set(style="whitegrid")
  plt.subplots_adjust(hspace=0.5,wspace=0.5)
  sns.violinplot(x=cols,y='Gender',data=df)
  plt.ylabel('Gender' if n==1 else " ")
  plt.title('Violin Plot')
plt.show()

age_17_25=df.Age[(df.Age >=17) & (df.Age<=25)]
age_26_30=df.Age[(df.Age >=26) & (df.Age<=30)]
age_31_40=df.Age[(df.Age >=31) & (df.Age<=40)]

agex=["17-25","26-30","31-40"]
agey=[len(age_17_25.values),len(age_26_30.values),len(age_31_40.values)]
plt.figure(figsize=(15,6))
sns.barplot(x=agex,y=agey,palette="mako")
plt.title("No of customers and ages")
plt.xlabel("Age")
plt.ylabel("No of customers")
plt.show()

sns.relplot(x="Annual Income (k$)",y="Spending Score (1-100)",data=df)

SpendingS_1_20 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 1) & (df["Spending Score (1-100)"] <= 20)]
SpendingS_21_40 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 21) & (df["Spending Score (1-100)"] <= 40)]
SpendingS_41_60 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 41) & (df["Spending Score (1-100)"] <= 60)]
SpendingS_61_80 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 61) & (df["Spending Score (1-100)"] <= 80)]
SpendingS_81_100 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 81) & (df["Spending Score (1-100)"] <= 100)]

SSx = ["1-20", "21-40", "41-60", "61-80", "81-100"]
SSy = [
    len(SpendingS_1_20.values),
    len(SpendingS_21_40.values),
    len(SpendingS_41_60.values),
    len(SpendingS_61_80.values),
    len(SpendingS_81_100.values)
]

plt.figure(figsize=(15, 6))
sns.barplot(x=SSx, y=SSy, palette="rocket")
plt.title("Spending scores")
plt.xlabel("Score")
plt.ylabel("Number of customers having score")
plt.show()

print(df.columns)

AI0_5=df["Annual Income (k$)"][(df["Annual Income (k$)"]>=0) & (df["Annual Income (k$)"] <=5)]
AI6_10=df["Annual Income (k$)"][(df["Annual Income (k$)"]>=6) & (df["Annual Income (k$)"] <=10)]
AI11_15=df["Annual Income (k$)"][(df["Annual Income (k$)"]>=11) & (df["Annual Income (k$)"] <=15)]
AI16_20=df["Annual Income (k$)"][(df["Annual Income (k$)"]>=16) & (df["Annual Income (k$)"] <=20)]

AIx = ["$1-5", "$6-10", "$11-15", "16-20"]
AIy=[len(AI0_5.values),len(AI6_10.values),len(AI11_15.values),len(AI16_20.values)]


plt.figure(figsize=(15, 6))
sns.barplot(x=AIx, y=AIy, palette="Spectral")
plt.title("Annual Income")
plt.xlabel("Income")
plt.ylabel("Number of customers ")
plt.show()

x1=df.loc[:,["Age","Spending Score (1-100)"]].values
from sklearn.cluster import KMeans
wcss=[]
for k in range(1,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(x1)
  wcss.append(kmeans.inertia_)

plt.figure(figsize=(15,6))
plt.grid()
plt.plot(range(1,11),wcss,linewidth=2,color="red",marker="8")
plt.xlabel("K Label")
plt.ylabel("WCSS")
plt.show()

kmeans=KMeans(n_clusters=4)
label=kmeans.fit_predict(x1)
print(label)

print(kmeans.cluster_centers_)

plt.scatter(x1[:,0],x1[:,1],c=kmeans.labels_,cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color="black")
plt.title("Clusters of customers")
plt.xlabel("Age")
plt.ylabel("Spending Score(1-100)")
plt.show()

x2=df.loc[:,["Annual Income (k$)","Spending Score (1-100)"]].values

from sklearn.cluster import KMeans
wcss=[]
for k in range(1,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(x2)
  wcss.append(kmeans.inertia_)

plt.figure(figsize=(15,6))
plt.grid()
plt.plot(range(1,11),wcss,linewidth=2,color="red",marker="8")
plt.xlabel("K Value")
plt.ylabel("WCSS")
plt.show()

kmeans=KMeans(n_clusters=5)
label=kmeans.fit_predict(x2)
print(label)

print(kmeans.cluster_centers_)

plt.scatter(x2[:,0],x1[:,1],c=kmeans.labels_,cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color="black")
plt.title("Clusters of customers")
plt.xlabel("Annual Income(k$)")
plt.ylabel("Spending Score(1-100)")
plt.show()

x3=df.iloc[:,1:]
wcss=[]
for k in range(1,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(x3)
  wcss.append(kmeans.inertia_)

plt.figure(figsize=(15,6))
plt.grid()
plt.plot(range(1,11),wcss,linewidth=2,color="red",marker="8")
plt.xlabel("K Value")
plt.ylabel("WCSS")
plt.show()

kmeans=KMeans(n_clusters=5)
label=kmeans.fit_predict(x3)
print(label)

print(kmeans.cluster_centers_)

clusters=kmeans.fit_predict(x3)
df["label"] = clusters

from mpl_toolkits.mplot3d import Axes3D
fig=plt.figure(figsize=(20,10))
ax=fig.add_subplot(111,projection="3d")
ax.scatter(df.Age[df.label==0],df["Annual Income (k$)"][df.label==0],df['Spending Score (1-100)'][df.label==0],c="blue",s=60)
ax.scatter(df.Age[df.label==1],df["Annual Income (k$)"][df.label==1],df['Spending Score (1-100)'][df.label==1],c="red",s=60)
ax.scatter(df.Age[df.label==2],df["Annual Income (k$)"][df.label==2],df['Spending Score (1-100)'][df.label==2],c="green",s=60)
ax.scatter(df.Age[df.label==3],df["Annual Income (k$)"][df.label==3],df['Spending Score (1-100)'][df.label==3],c="orange",s=60)
ax.scatter(df.Age[df.label==4],df["Annual Income (k$)"][df.label==4],df['Spending Score (1-100)'][df.label==4],c="purple",s=60)
ax.view_init(30,185)

plt.xlabel("Age")
plt.ylabel("Annual Income (k$)")
ax.set_zlabel("Spending Score (1-100)")

plt.show()

pip install scikit-learn matplotlib

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Assuming df is your existing DataFrame
df = pd.read_csv('Mall_Customers.csv')  # Uncomment and modify this line to load your actual dataset

# Select only numerical columns for clustering
numerical_df = df.select_dtypes(include=['number'])

# Perform KMeans clustering on the numerical data
n_clusters = 4
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
cluster_labels = kmeans.fit_predict(numerical_df)

# Calculate the silhouette score
sil_score = silhouette_score(numerical_df, cluster_labels)

print(f'Silhouette Score: {sil_score:.3f}')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score
import seaborn as sns

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Select only numerical columns for clustering
numerical_df = df.select_dtypes(include=['number'])

# Perform KMeans clustering
n_clusters = 4
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
cluster_labels = kmeans.fit_predict(numerical_df)

# Calculate the silhouette scores for each sample
silhouette_vals = silhouette_samples(numerical_df, cluster_labels)

# Calculate the average silhouette score
average_silhouette_score = silhouette_score(numerical_df, cluster_labels)

# Plot the distribution of silhouette scores
plt.figure(figsize=(10, 6))
sns.histplot(silhouette_vals, kde=True, bins=30, color='skyblue')
plt.axvline(average_silhouette_score, color='red', linestyle='--', label=f'Average Silhouette Score: {average_silhouette_score:.2f}')
plt.xlabel('Silhouette Coefficient Values')
plt.ylabel('Frequency')
plt.title('Distribution of Silhouette Scores')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Select only numerical columns for clustering
numerical_df = df.select_dtypes(include=['number'])

# Range of k values to test
k_values = range(2, 9)
silhouette_scores = []

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(numerical_df)
    silhouette_avg = silhouette_score(numerical_df, cluster_labels)
    silhouette_scores.append(silhouette_avg)

# Plot the silhouette scores against k values
plt.figure(figsize=(10, 6))
plt.plot(k_values, silhouette_scores, 'o-', color='red', linewidth=2, markersize=8)
plt.xlabel('k')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score for different values of k')
plt.xticks(k_values)
plt.grid(True)
plt.show()

# Perform KMeans clustering for the best k (highest silhouette score)
best_k = k_values[np.argmax(silhouette_scores)]
best_kmeans = KMeans(n_clusters=best_k, random_state=42)
best_cluster_labels = best_kmeans.fit_predict(numerical_df)
centers = best_kmeans.cluster_centers_

# Plot the clusters
plt.figure(figsize=(10, 6))
plt.scatter(numerical_df.iloc[:, 0], numerical_df.iloc[:, 1], c=best_cluster_labels, s=50, cmap='viridis')
plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75, marker='X')
plt.xlabel(numerical_df.columns[0])
plt.ylabel(numerical_df.columns[1])
plt.title(f'KMeans Clustering (k={best_k})')
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Select only numerical columns for clustering
numerical_df = df.select_dtypes(include=['number'])

# Range of k values to test
k_values = range(2, 12)
silhouette_scores = []

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(numerical_df)
    silhouette_avg = silhouette_score(numerical_df, cluster_labels)
    silhouette_scores.append(silhouette_avg)

# Plot the silhouette scores against k values
plt.figure(figsize=(10, 6))
plt.plot(k_values, silhouette_scores, 'o-', color='red', linewidth=2, markersize=8)
plt.xlabel('Number of clusters K')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores vs. Number of Clusters')
plt.xticks(k_values)
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Select only numerical columns for clustering
numerical_df = df.select_dtypes(include=['number'])

# Range of k values to test
k_values = range(2, 12)
silhouette_scores = []

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    cluster_labels = kmeans.fit_predict(numerical_df)
    silhouette_avg = silhouette_score(numerical_df, cluster_labels)
    silhouette_scores.append(silhouette_avg)

# Create a DataFrame for the results
results_df = pd.DataFrame({
    'Number of Clusters': k_values,
    'Silhouette Score': silhouette_scores
})

# Save the results to a CSV file
results_df.to_csv('kmeans_silhouette_scores.csv', index=False)

# Plot the silhouette scores against k values
plt.figure(figsize=(10, 6))
plt.plot(k_values, silhouette_scores, 'o-', color='red', linewidth=2, markersize=8)
plt.xlabel('Number of clusters K')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores vs. Number of Clusters')
plt.xticks(k_values)
plt.grid(True)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Load the dataset
df = pd.read_csv('Mall_Customers.csv')

# Select the columns for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']].values

# Apply KMeans clustering
kmeans = KMeans(n_clusters=5, random_state=42)
kmeans.fit(X)

# Create a DataFrame for clustered data points
clustered_data = pd.DataFrame(X, columns=['Annual Income (k$)', 'Spending Score (1-100)'])
clustered_data['Cluster'] = kmeans.labels_

# Create a DataFrame for centroids
centroids = pd.DataFrame(kmeans.cluster_centers_, columns=['Annual Income (k$)', 'Spending Score (1-100)'])
centroids['Cluster'] = ['Centroid'] * len(centroids)

# Combine the data points and centroids into one DataFrame
combined_data = pd.concat([clustered_data, centroids], ignore_index=True)

# Save the combined data to a CSV file
combined_data.to_csv('clustered_data_with_centroids.csv', index=False)

